void Confirm_account_state();


in home

/*
	int maxSeconds = 10;
    //cout << "Enter an option within " << maxSeconds << " seconds:" << endl;

	int option;
    if (waitForUserInput(maxSeconds, option)) {  
        //cin >> option;
    } else {
        cout << "Error: Timed out waiting for user input." << endl;
		eject_card();
		//call exit function here
    }
*/


void account(int option);

/*
void account(int option) {

    if(option >= 1 && option <= 5){
		// Pass in account type
		switch(option){
			case 1:
				balance_state();
				break;
			case 2: 
				withdraw_state();
				break;
			case 3: 
				deposit_state();
				break;
			case 4:
				Transfer_state();
				break;
			case 5:
				change_pin();
				break;
		}
	}
	else{
		cout << "Invalid input.. goint back to ";
	}
}
*/


Timer

//#include <chrono>
//#include <thread>
//#include <future>

//useless?
/*
bool waitForUserInput(int maxSeconds) {
	auto startTime = chrono::system_clock::now();
	this_thread::sleep_for(chrono::seconds(maxSeconds));
	auto endTime = chrono::system_clock::now();
	auto elapsedSeconds = chrono::duration_cast<chrono::seconds>(endTime - startTime).count();
	return elapsedSeconds < maxSeconds;
}
*/

/*
bool waitForUserInput(int maxSeconds) {
    cout << "Enter an option within " << maxSeconds << " seconds:" << endl;

    auto start_time = chrono::steady_clock::now();
    future<int> user_input = async(launch::async, []() {
        int option;
        cin >> option;
        return option;
    });

    auto elapsed_time = chrono::steady_clock::now() - start_time;
    auto timeout = chrono::seconds(maxSeconds);

    if (elapsed_time < timeout) {
        return user_input.wait_for(timeout - elapsed_time) == future_status::ready;
    } else {
        cout << "Error: Timed out waiting for user input." << endl;
        return false;
	}
}
*/

/*
bool waitForUserInput(int maxSeconds) {
    cout << "Enter an option within " << maxSeconds << " seconds:" << endl;

    auto start_time = chrono::steady_clock::now();
    future<int> user_input = async(launch::async, []() {
        int option;
        cin >> option;
        return option;
    });

    auto elapsed_time = chrono::steady_clock::now() - start_time;
    auto timeout = chrono::seconds(maxSeconds);

    if (elapsed_time < timeout) {
        auto result = user_input.wait_for(timeout - elapsed_time);
        if (result == future_status::ready) {
            return true;  // User input received within the time limit
        } else {
            cout << "Timed out waiting for user input." << endl;
            return false;  // Timeout occurred
        }
    } else {
        cout << "Timed out waiting for user input." << endl;
        return false;  // Timeout occurred
	}
}
*/

/*
bool waitForUserInput(int maxSeconds) {
    cout << "Enter an option within " << maxSeconds << " seconds:" << endl;

    auto start_time = chrono::steady_clock::now();
    future<int> user_input = async(launch::async, []() {
        int option;
        cin >> option;
        return option;
    });

    auto elapsed_time = chrono::steady_clock::now() - start_time;
    auto timeout = chrono::seconds(maxSeconds);

    if (elapsed_time < timeout) {
        auto result = user_input.wait_for(timeout - elapsed_time);
        if (result == future_status::ready) {
            return true;  // User input received within the time limit
        } else {
            cout << "Timed out waiting for user input. Ejecting card." << endl;
            eject_card();  // Eject the card immediately
            return false;        // This line is technically unreachable
        }
    } else {
        cout << "Timed out waiting for user input. Ejecting card." << endl;
        eject_card();  // Eject the card immediately
        return false;        // This line is technically unreachable
	}
}

*/